var onRun = function(context) {

    var ga = require("../modules/Google_Analytics");
    ga("Symbol");

    var preferences = require("../modules/Preferences");

    var document = context.document;
    var selection = context.selection;
    var symbolInstancesInSelection = getSymbolInstancesInSelection(selection);
    var symbolMastersInSelection = getSymbolMastersInSelection(selection);

    // Rename all instances
    if (
        selection.count() == 0 ||
        (symbolInstancesInSelection.count() == 0 && symbolMastersInSelection.count() == 0)
    ) {
        var instances = NSMutableArray.alloc().init();
        var loopPages = document.pages().objectEnumerator();
        var page;
        while (page = loopPages.nextObject()) {
            instances.addObjectsFromArray(page.allSymbolInstancesInChildren().allObjects());
        }
        renameInstances(context, instances, "Rename All Instances", "Change the name for all sysmbol instances.");
    }

    // Rename all selected instances
    else if (
        symbolInstancesInSelection.count() > 0 &&
        symbolInstancesInSelection.count() >= symbolMastersInSelection.count()
    ) {
        var instances = symbolInstancesInSelection;
        renameInstances(context, instances, "Rename Instances", "Change the name for all selected sysmbol instances.");
    }

    // Rename all instances of selected symbol master
    else if (
        symbolMastersInSelection.count() > 0 &&
        symbolMastersInSelection.count() > symbolInstancesInSelection.count()
    ) {
        var instances = NSMutableArray.alloc().init();
        var loopSymbolMasterInSelection = symbolMastersInSelection.objectEnumerator();
        var symbolMaster;
        while (symbolMaster = loopSymbolMasterInSelection.nextObject()) {
            instances.addObjectsFromArray(symbolMaster.allInstances());
        }
        renameInstances(context, instances, "Rename Instances of Symbol Master", "Change the name for all sysmbol instances of selected symbol masters.");
    }

};

function renameInstances(context, instances, title, message) {
    // Dialog
    var dialog = NSAlert.alloc().init();
    dialog.setMessageText(title);
    dialog.setInformativeText(message);
    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    // Views
    var views = NSMutableArray.alloc().init();

    var labelNameType = labelView("Change the name to...");
    views.addObject(labelNameType);

    var buttonNameType = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 30));
    buttonNameType.addItemsWithTitles([
        "Original name of symbol master.",
        "Base name of symbol master.",
        "1st group name of symbol master.",
        "2nd group name of symbol master.",
        "Custom name."
    ]);
    views.addObject(buttonNameType);

    var labelCustomName = labelView("Custom name");
    views.addObject(labelCustomName);

    var inputCustomName = textFieldView(preferences.get("customInstanceName") || "");
    textFieldEditable(inputCustomName, false);
    views.addObject(inputCustomName);

    buttonNameType.setCOSJSTargetFunction(function(sender) {
        if (sender.indexOfSelectedItem() == sender.itemArray().count() - 1) {
            textFieldEditable(inputCustomName, true);
        } else {
            textFieldEditable(inputCustomName, false);
        }
    });

    // Layout
    var wrapViewHeight = 0;
    var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 0));
    accessoryView.setFlipped(true);
    views.forEach(function(view) {
        var currentFrame = view.bounds();
        currentFrame.origin.y = wrapViewHeight + 8;
        wrapViewHeight += currentFrame.size.height + 8;
        view.setFrame(currentFrame);
        accessoryView.addSubview(view);
    });

    var viewFrame = accessoryView.frame();
    viewFrame.size.height = wrapViewHeight;
    accessoryView.setFrame(viewFrame);
    dialog.setAccessoryView(accessoryView);

    // Run
    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        preferences.set("customInstanceName", inputCustomName.stringValue());

        var loopInstances = instances.objectEnumerator();
        var instance;
        while (instance = loopInstances.nextObject()) {

            // Original name of symbol master.
            if (buttonNameType.indexOfSelectedItem() == 0) {
                instance.setName(instance.symbolMaster().name().trim());
            }

            // Base name of symbol master.
            if (buttonNameType.indexOfSelectedItem() == 1) {
                var lastIndexOfSlash = instance.symbolMaster().name().lastIndexOf("/");
                var name = instance.symbolMaster().name().substr(lastIndexOfSlash + 1).trim();
                instance.setName(name);
            }

            // 1st group name of symbol master
            if (buttonNameType.indexOfSelectedItem() == 2) {
                var name = instance.symbolMaster().name().split("/")[0].trim();
                instance.setName(name);
            }

            // 2nd group name of symbol master
            if (buttonNameType.indexOfSelectedItem() == 3) {
                var nameArray = instance.symbolMaster().name().split("/");
                var name = (nameArray.length > 1 ? nameArray[1] : nameArray[0]).trim();
                instance.setName(name);
            }

            // Custom name.
            if (buttonNameType.indexOfSelectedItem() == 4) {
                instance.setName(inputCustomName.stringValue());
            }

        }

    }
}

function getSymbolInstancesInSelection(selection) {
    var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
    return selection.filteredArrayUsingPredicate(predicate);
}

function getSymbolMastersInSelection(selection) {
    var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolMaster");
    return selection.filteredArrayUsingPredicate(predicate);
}

function labelView(text) {
    var textView = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 300, 16)));
    textView.setStringValue(text);
    textView.setFont(NSFont.boldSystemFontOfSize(12));
    textView.setTextColor(NSColor.blackColor());
    textView.setBezeled(false);
    textView.setDrawsBackground(false);
    textView.setEditable(false);
    textView.setSelectable(false);
    return textView;
}

function textFieldView(text) {
    var textView = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 300, 25)));
    textView.setStringValue(text);
    textView.setFont(NSFont.systemFontOfSize(12));
    return textView;
}

function textFieldEditable(view, bool) {
    if (bool) {
        view.setEditable(true);
        view.setTextColor(NSColor.blackColor());
    } else {
        view.setEditable(false);
        view.setTextColor(NSColor.grayColor());
    }
}
