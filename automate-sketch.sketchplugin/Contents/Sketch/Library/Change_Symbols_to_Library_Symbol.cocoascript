var onRun = function(context) {

    var ga = require("../modules/Google_Analytics");
    ga(context, "Library");

    var ui = require("../modules/UI");
    var util = require("util");
    var document = context.document;
    var documentData = document.documentData();

    if (MSApplicationMetadata.metadata().appVersion < 47) {
        document.showMessage("ðŸ˜® You have to update to Sketch 47+ to use this feature.");
        return;
    }

    var selection = context.selection;
    var assetLibraryController = AppController.sharedInstance().librariesController();
    var availableLibraries = assetLibraryController.availableLibraries();
    var sortDescriptor = NSSortDescriptor.sortDescriptorWithKey_ascending_selector("name", true, "localizedStandardCompare:");
    availableLibraries = availableLibraries.sortedArrayUsingDescriptors([sortDescriptor]);

    if (availableLibraries.count() == 0) {
        document.showMessage("You have no available libraries.");
        return;
    }

    // All symbol master will be changed
    var symbolMastersWillChanged = NSMutableArray.alloc().init();
    if (selection.count() > 0) {
        var loopSelection = selection.objectEnumerator();
        var layer;
        while (layer = loopSelection.nextObject()) {
            var loopChild = layer.children().objectEnumerator();
            var child;
            while (child = loopChild.nextObject()) {
                if (child.class() == "MSSymbolInstance") {
                    if (!child.symbolMaster().isForeign()) {
                        if (!symbolMastersWillChanged.containsObject(child.symbolMaster())) {
                            symbolMastersWillChanged.addObject(child.symbolMaster());
                        }
                    }
                }
                if (child.class() == "MSSymbolMaster") {
                    if (!symbolMastersWillChanged.containsObject(child)) {
                        symbolMastersWillChanged.addObject(child);
                    }
                }
            }
        }
    } else {
        symbolMastersWillChanged.addObjectsFromArray(documentData.localSymbols());
    }

    if (symbolMastersWillChanged.count() == 0) {
        if (selection.count() > 0) {
            document.showMessage("You have not selected any symbol.");
        } else {
            document.showMessage("Current document has no symbols.");
        }
        return;
    }

    // Dialog
    var dialog;
    if (symbolMastersWillChanged.count() < documentData.localSymbols().count()) {
        dialog = ui.cosDialog(
            "Change Selected Symbols to Library Symbol",
            "Change all selected local symbols to library symbol with same symbol id or name."
        );
    } else {
        dialog = ui.cosDialog(
            "Change All Local Symbols to Library Symbol",
            "Change all local symbols to library symbol with same symbol id or name."
        );
    }

    // Choose a library file
    var labelLibrary = ui.textLabel("Choose a library");
    dialog.addAccessoryView(labelLibrary);
    var libraryNames = util.toArray(availableLibraries).map(function(library) {
        return library.name();
    });
    var selectBoxLibrary = ui.popupButton(libraryNames);
    dialog.addAccessoryView(selectBoxLibrary);

    var labelNameOrId = ui.textLabel("Replace library symbol with same...");
    dialog.addAccessoryView(labelNameOrId);
    var selectBoxNameOrId = ui.popupButton(["symbol name", "symbol id"]);
    dialog.addAccessoryView(selectBoxNameOrId);

    // TODO: add symbol previews

    var checkboxSize = ui.checkBox(false, "Set all instances to original size.");
    dialog.addAccessoryView(checkboxSize);

    var selectedLibrary;
    var responseCode = dialog.runModal();
    if (responseCode == 1000) {
        selectedLibrary = availableLibraries.objectAtIndex(selectBoxLibrary.indexOfSelectedItem());
    } else {
        return;
    }

    if (selectedLibrary.document().localSymbols().count() == 0) {
        document.showMessage('Library "' + selectedLibrary.name() + '" not have symbols.');
        return;
    }

    // Import symbol from library
    var countSymbol = 0;
    var countInstance = 0;
    var symbolIDMap = NSMutableDictionary.alloc().init();
    var loopSymbolMastersWillChanged = symbolMastersWillChanged.objectEnumerator();
    var symbolMaster;
    while (symbolMaster = loopSymbolMastersWillChanged.nextObject()) {

        var remoteSymbol;
        if (selectBoxNameOrId.indexOfSelectedItem() == 0) {
            remoteSymbol = findSymbolByName_fromLibrary(symbolMaster.name(), selectedLibrary);
        } else {
            remoteSymbol = findSymbolByID_fromLibrary(symbolMaster.symbolID(), selectedLibrary);
        }

        if (remoteSymbol) {

            // Import symbol
            var importedSymbol;
            if (MSApplicationMetadata.metadata().appVersion >= 50) {
                var shareableObjectReference = MSShareableObjectReference.referenceForShareableObject_inLibrary(
                    remoteSymbol, selectedLibrary
                );
                importedSymbol = assetLibraryController.importShareableObjectReference_intoDocument(
                    shareableObjectReference, documentData
                );
            } else {
                importedSymbol = assetLibraryController.importForeignSymbol_fromLibrary_intoDocument(
                    remoteSymbol, selectedLibrary, documentData
                );
            }

            // Replace all instances of symbolMaster
            var instancesWillReplaced = symbolMaster.allInstances();
            var loopInstancesWillReplaced = instancesWillReplaced.objectEnumerator();
            var instanceWillReplaced;
            while (instanceWillReplaced = loopInstancesWillReplaced.nextObject()) {
                instanceWillReplaced.changeInstanceToSymbol(importedSymbol.symbolMaster());
                instanceWillReplaced.setName(instanceWillReplaced.symbolMaster().name());
                if (checkboxSize.state()) {
                    instanceWillReplaced.resetSizeToMaster();
                }
                countInstance ++;
            }

            // Delete symbolMaster
            symbolMaster.removeFromParent();
            countSymbol ++;

            // Symbol ID map
            symbolIDMap.setObject_forKey(importedSymbol.symbolMaster().symbolID(), symbolMaster.symbolID());

        }
    }

    // Change overrides mapping
    if (countInstance > 0) {
        var instancesInCurrentDocument = instancesInDocument(document);
        var loopInstancesInCurrentDocument = instancesInCurrentDocument.objectEnumerator();
        var instance;
        while (instance = loopInstancesInCurrentDocument.nextObject()) {
            instance.updateOverridesWithObjectIDMap(symbolIDMap);
        }
        document.reloadInspector();
    }

    var message;
    if (countSymbol > 1) {
        message = countSymbol + " symbol masters changed to library symbol.";
    } else if (countSymbol == 1) {
        message = "1 symbol master changed to library symbol.";
    } else {
        message = "No symbol masters changed to library symbol.";
    }
    document.showMessage(message);

};

function instancesInDocument(document) {
    var allInstances = NSMutableArray.alloc().init();
    var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
    var loopPages = document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var instancesInPage = page.children().filteredArrayUsingPredicate(predicate);
        allInstances.addObjectsFromArray(instancesInPage);
    }
    return allInstances;
}

function findSymbolByID_fromLibrary(id, library) {
    return library.document().symbolWithID(id);
}

function findSymbolByName_fromLibrary(name, library) {
    var predicate = NSPredicate.predicateWithFormat("name == %@", name);
    var symbols = library.document().localSymbols().filteredArrayUsingPredicate(predicate);
    return symbols.firstObject();
}
