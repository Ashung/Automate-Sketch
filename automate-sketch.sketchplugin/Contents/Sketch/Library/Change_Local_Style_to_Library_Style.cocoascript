var onRun = function(context) {

    var ga = require("../modules/Google_Analytics");
    ga(context, "Library");

    var sketch = require("sketch");
    var toast = sketch.UI.message;
    var util = require("util");
    var Dialog = require("../modules/Dialog").dialog;
    var ui = require("../modules/Dialog").ui;
    var preview = require("../modules/Preview");

    var greenColor = NSColor.colorWithRed_green_blue_alpha(0, 0.8, 0.3, 1);
    var redColor = NSColor.colorWithRed_green_blue_alpha(0.8, 0.1, 0.1, 1);
    var noColor = NSColor.colorWithRed_green_blue_alpha(0, 0, 0, 0);

    if (sketch.version.sketch < 51) {
        toast("ðŸ˜® You have to update to Sketch 51+ to use thie feature.");
        return;
    }

    var document = context.document;
    var documentData = document.documentData();
    var allLocalTextStyles = documentData.layerTextStyles().objects();
    var allLocalLayerStyles = documentData.layerStyles().objects();
    var allLocalStyle;
    var styleType;
    var pluginIdentifier = context.command.identifier();
    if (pluginIdentifier == "change_local_text_style_to_library_text_style") {
        allLocalStyle = allLocalTextStyles;
        styleType = "text";
    }
    if (pluginIdentifier == "change_local_layer_style_to_library_layer_style") {
        allLocalStyle = allLocalLayerStyles;
        styleType = "layer";
    }
    if (allLocalStyle.count() == 0) {
        toast(`No ${styleType} styles in current document.`);
        return;
    }
    var sortDescriptor = NSSortDescriptor.sortDescriptorWithKey_ascending_selector("name", true, "localizedStandardCompare:");
    allLocalStyle = allLocalStyle.sortedArrayUsingDescriptors([sortDescriptor]);

    var assetLibraryController = AppController.sharedInstance().librariesController();
    var availableLibraries = assetLibraryController.availableLibraries();
    availableLibraries = availableLibraries.sortedArrayUsingDescriptors([sortDescriptor]);
    if (availableLibraries.count() == 0) {
        toast("You have no available libraries.");
        return;
    }

    var dialog = new Dialog(
        `Change Local ${capitalize(styleType)} Style to Library ${capitalize(styleType)} Style`,
        `Change the following local ${styleType} styles to to foreign ${styleType} style from library.` +
        "\n\nGreen â€¢ : Have match style in current library, and same properties." +
        "\nRed â€¢ : Have match style in current library, but different properties.",
        400
    );

    // Choose a library
    var libraryLabelView = ui.textLabel("Choose A Library");
    dialog.addView(libraryLabelView);

    var libraryNames = util.toArray(availableLibraries).map(function(library) {
        return library.name();
    });
    var selectBoxLibrary = ui.popupButton(libraryNames, 200);
    dialog.addView(selectBoxLibrary);

    // Choose name, properties, id
    var labelChangeType = ui.textLabel("Replace library style with same...");
    dialog.addView(labelChangeType);
    var selectBoxChangeType = ui.popupButton(["Name", "Properties", "ID"], 200);
    dialog.addView(selectBoxChangeType);

    // List all style
    var stylesWillChanged = allLocalStyle.mutableCopy();
    var selectedItemsCount = stylesWillChanged.count();

    var selectAllStyles = ui.checkBox(true, "Select / Deselect all styles.");
    selectAllStyles.setAllowsMixedState(true);
    dialog.addView(selectAllStyles);

    var allMatchStyles = [];
    var views = [];
    util.toArray(allLocalStyle).forEach(function(style) {
        var wrapper = ui.view([400, 50]);
        var checkBoxStyle;
        var imageStyle;
        if (styleType == "text") {
            checkBoxStyle = ui.checkBox(true, " ", [5, 10, 30, 30]);
            imageStyle = ui.imageButton(preview.textStyle(style), [30, 10, 360, 30]);
        } else {
            checkBoxStyle = ui.checkBox(true, "            " + style.name(), [5, 10, 380, 30]);
            imageStyle = ui.imageButton(preview.layerStyle(style), [30, 10, 30, 30]);
        }

        // Add status view
        var status = ui.circle("#00000000", [380, 21, 8, 8]);
        var selectedLibrary = availableLibraries.objectAtIndex(selectBoxLibrary.indexOfSelectedItem());
        var matchLibraryStyle;
        if (selectBoxChangeType.indexOfSelectedItem() == 0) {
            matchLibraryStyle = findStyleWithName_fromLibrary_type(style.name(), selectedLibrary, styleType);
        }
        if (selectBoxChangeType.indexOfSelectedItem() == 1) {
            matchLibraryStyle = findSameStyle_fromLibrary_type(style, selectedLibrary, styleType);
        }
        if (selectBoxChangeType.indexOfSelectedItem() == 2) {
            matchLibraryStyle = findStyleWithID_fromLibrary_type(style.objectID(), selectedLibrary, styleType);
        }
        // TODO : id: style
        allMatchStyles.push({
            localStyle: style,
            libraryStyle: matchLibraryStyle
        });
        if (matchLibraryStyle) {
            if (style.value().propertiesAreEqual(matchLibraryStyle.value())) {
                status.setBackgroundColor(greenColor);
            } else {
                status.setBackgroundColor(redColor);
            }
        }

        wrapper.addSubview(checkBoxStyle);
        wrapper.addSubview(imageStyle);
        wrapper.addSubview(status);
        views.push(wrapper);

        checkBoxStyle.setCOSJSTargetFunction(function(sender) {
            if (sender.state() == NSOffState) {
                selectedItemsCount --;
                stylesWillChanged.removeObject(style);
            }
            if (sender.state() == NSOnState) {
                selectedItemsCount ++;
                stylesWillChanged.addObject(style);
            }
            if (selectedItemsCount == allLocalStyle.count()) {
                selectAllStyles.setState(NSOnState);
            } else if (selectedItemsCount == 0) {
                selectAllStyles.setState(NSOffState);
            } else {
                selectAllStyles.setState(NSMixedState);
            }
        });
        imageStyle.setCOSJSTargetFunction(function(sender) {
            var checkBox = sender.superview().subviews().firstObject();
            checkBox.setState(checkBox.state() == NSOnState ? NSOffState : NSOnState);
            if (checkBox.state() == NSOffState) {
                selectedItemsCount --;
                stylesWillChanged.removeObject(style);
            }
            if (checkBox.state() == NSOnState) {
                selectedItemsCount ++;
                stylesWillChanged.addObject(style);
            }
            if (selectedItemsCount == allLocalStyle.count()) {
                selectAllStyles.setState(NSOnState);
            } else if (selectedItemsCount == 0) {
                selectAllStyles.setState(NSOffState);
            } else {
                selectAllStyles.setState(NSMixedState);
            }
        });
    });
    var scrollView = ui.scrollView(views, [400, 300]);
    dialog.addView(scrollView);

    // Reset style
    var resetStyleView = ui.checkBox(false, `Reset all ${styleType} styles.`);
    dialog.addView(resetStyleView);

    // Actions
    selectAllStyles.setCOSJSTargetFunction(function(sender) {
        if (sender.state() == NSOnState || sender.state() == NSMixedState) {
            sender.setState(NSOnState);
            selectedItemsCount = allLocalStyle.count();
            stylesWillChanged = allLocalStyle.mutableCopy();
            scrollView.documentView().subviews().forEach(function(view) {
                view.subviews().objectAtIndex(0).setState(NSOnState);
            });
        } else {
            selectedItemsCount = 0;
            stylesWillChanged.removeAllObjects();
            scrollView.documentView().subviews().forEach(function(view) {
                view.subviews().objectAtIndex(0).setState(NSOffState);
            });
        }
    });
    
    selectBoxLibrary.setCOSJSTargetFunction(function(sender) {
        allMatchStyles = [];
        var selectedLibrary = availableLibraries.objectAtIndex(sender.indexOfSelectedItem());
        util.toArray(allLocalStyle).forEach(function(style, index) {
            var matchLibraryStyle;
            if (selectBoxChangeType.indexOfSelectedItem() == 0) {
                matchLibraryStyle = findStyleWithName_fromLibrary_type(style.name(), selectedLibrary, styleType);
            }
            if (selectBoxChangeType.indexOfSelectedItem() == 1) {
                matchLibraryStyle = findSameStyle_fromLibrary_type(style, selectedLibrary, styleType);
            }
            if (selectBoxChangeType.indexOfSelectedItem() == 2) {
                matchLibraryStyle = findStyleWithID_fromLibrary_type(style.objectID(), selectedLibrary, styleType);
            }
            allMatchStyles.push({
                localStyle: style,
                libraryStyle: matchLibraryStyle
            });
            var status = scrollView.documentView().subviews().objectAtIndex(index).subviews().objectAtIndex(2);
            if (matchLibraryStyle) {
                if (style.value().propertiesAreEqual(matchLibraryStyle.value())) {
                    status.setBackgroundColor(greenColor);
                } else {
                    status.setBackgroundColor(redColor);
                }
            } else {
                status.setBackgroundColor(noColor);
            }
        });
    });

    selectBoxChangeType.setCOSJSTargetFunction(function(sender) {
        allMatchStyles = [];
        var selectedLibrary = availableLibraries.objectAtIndex(selectBoxLibrary.indexOfSelectedItem());
        util.toArray(allLocalStyle).forEach(function(style, index) {
            var matchLibraryStyle;
            if (sender.indexOfSelectedItem() == 0) {
                matchLibraryStyle = findStyleWithName_fromLibrary_type(style.name(), selectedLibrary, styleType);
            }
            if (sender.indexOfSelectedItem() == 1) {
                matchLibraryStyle = findSameStyle_fromLibrary_type(style, selectedLibrary, styleType);
            }
            if (sender.indexOfSelectedItem() == 2) {
                matchLibraryStyle = findStyleWithID_fromLibrary_type(style.objectID(), selectedLibrary, styleType);
            }
            allMatchStyles.push({
                localStyle: style,
                libraryStyle: matchLibraryStyle
            });
            var status = scrollView.documentView().subviews().objectAtIndex(index).subviews().objectAtIndex(2);
            if (matchLibraryStyle) {
                if (style.value().propertiesAreEqual(matchLibraryStyle.value())) {
                    status.setBackgroundColor(greenColor);
                } else {
                    status.setBackgroundColor(redColor);
                }
            } else {
                status.setBackgroundColor(noColor);
            }
        });
    });

    var runModal = dialog.run();
    if (runModal.responseCode == 1000) {

    }


    return;

    // TODO: xxxxx

    // Run
    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        if (allMatchStyles.length == 0) {
            return;
        }

        // Filter selected styles
        var selectedMatchStyles = [];
        scrollView.documentView().subviews().forEach(function(view, index) {
            if (view.subviews().firstObject().state() == NSOnState) {
                selectedMatchStyles.push(allMatchStyles[index]);
            }
        });

        // Add library style to foreign style
        var selectedLibrary = availableLibraries.objectAtIndex(selectBoxLibrary.indexOfSelectedItem());
        var localStyleIDToForeignStyleMapping = {};
        selectedMatchStyles.forEach(function(matchItem) {
            var foreignStyle;
            if (styleType == "text") {
                foreignStyle = foreignTextStyleInDocument_forSharedStyle_fromLibrary(documentData, matchItem.library, selectedLibrary);
            }
            if (styleType == "layer") {
                foreignStyle = foreignLayerStyleInDocument_forSharedStyle_fromLibrary(documentData, matchItem.library, selectedLibrary);
            }
            localStyleIDToForeignStyleMapping[matchItem.local.objectID()] = foreignStyle;
        });

        // Find all symbol instances use selected style in override, except default value, then replace override value.
        var loopPages = document.pages().objectEnumerator();
        var page;
        while (page = loopPages.nextObject()) {
            var predicateSymbolInstance = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
            var symbolInstancesInPage = page.children().filteredArrayUsingPredicate(predicateSymbolInstance);
            var loopSymbolInstancesInPage = symbolInstancesInPage.objectEnumerator();
            var instance;
            while (instance = loopSymbolInstancesInPage.nextObject()) {
                MSAvailableOverride.flattenAvailableOverrides(instance.availableOverrides()).forEach(function(override) {
                    if (override.hasOverride() && override.overridePoint().isStyleOverride()) {
                        if (Object.keys(localStyleIDToForeignStyleMapping).includes(String(override.overrideValue()))) {
                            instance.setValue_forOverridePoint(
                                localStyleIDToForeignStyleMapping[override.overrideValue()].localShareID(),
                                override.overridePoint()
                            );
                        }
                    }
                });
            }
        };

        // Change sharedObjectID
        selectedMatchStyles.forEach(function(item) {
            item.local.allLayersInstances().forEach(function(layer) {
                if (MSApplicationMetadata.metadata().appVersion >= 52) {
                    var localStyleID = layer.sharedStyleID();
                    if (resetStyleView.state() == NSOffState) {
                        layer.setSharedStyleID(localStyleIDToForeignStyleMapping[localStyleID].localShareID());
                    }
                    // Reset Text/Layer Style
                    else {
                        layer.setSharedStyle(localStyleIDToForeignStyleMapping[localStyleID].localSharedStyle());
                    }
                } else {
                    var localStyleID = layer.style().sharedObjectID();
                    if (resetStyleView.state() == NSOffState) {
                        layer.style().setSharedObjectID(localStyleIDToForeignStyleMapping[localStyleID].localShareID());
                    }
                    // Reset Text/Layer Style
                    else {
                        layer.setStyle(localStyleIDToForeignStyleMapping[localStyleID].localSharedStyle().newInstance());
                    }
                }
            });
        });

        // Remove local style
        selectedMatchStyles.forEach(function(matchItem) {
            var sharedObjectContainer;
            if (styleType == "text") {
                sharedObjectContainer = documentData.layerTextStyles();
            }
            if (styleType == "layer") {
                sharedObjectContainer = documentData.layerStyles();
            }
            sharedObjectContainer.removeSharedObject(matchItem.local);
        });

        document.showMessage(
            `Change ${selectedMatchStyles.length} local ${styleType} style${selectedMatchStyles.length > 1 ? "s" : ""} to library style.`
        );

    }

    function loadData(library) {

        var libraryDocumentData = library.document();
        var allLibraryTextStyles = libraryDocumentData.layerTextStyles().objects();
        var allLibraryLayerStyles = libraryDocumentData.layerStyles().objects();
        var allLibraryStyles;
        if (styleType == "text") {
            allLibraryStyles = allLibraryTextStyles;
        }
        if (styleType == "layer") {
            allLibraryStyles = allLibraryLayerStyles;
        }

        allMatchStyles = [];
        allLocalStyle.forEach(localStyle => {
            allLibraryStyles.forEach(libraryStyle => {
                // TODO: Same ID, Properties, Name
                if (localStyle.value().propertiesAreEqual(libraryStyle.value())) {
                    allMatchStyles.push({
                        "local": localStyle,
                        "library": libraryStyle
                    });
                }
            });
        });

        if (allMatchStyles.length == 0) {
            var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 260));
            contentView.setFlipped(true);
            var noStyleTipView = UI.textLabel(`No matching ${styleType} styles in this library.`, [0, 120, 300, 30]);
            noStyleTipView.setTextColor(NSColor.grayColor());
            noStyleTipView.setAlignment(NSCenterTextAlignment);
            contentView.addSubview(noStyleTipView);
            scrollView.setDocumentView(contentView);
            selectAllView.setState(NSOffState);
            selectAllView.setEnabled(false);
            return;
        }

        selectAllView.setState(NSOnState);
        selectAllView.setEnabled(true);

        var itemHeight;
        if (styleType == "text") { itemHeight = 80; }
        if (styleType == "layer") { itemHeight = 40; }
        var itemsCount = allMatchStyles.length;
        var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, itemsCount * itemHeight));
        contentView.setFlipped(true);

        var selectedItemsCount = allMatchStyles.length;
        allMatchStyles.forEach(function(item, index) {
            var itemView = NSView.alloc().initWithFrame(NSMakeRect(0, itemHeight * index, 300, itemHeight));
            itemView.setFlipped(true);

            var checkbox = UI.checkBox(NSOnState, "", [10, 0, 300, itemHeight]);
            itemView.addSubview(checkbox);
            checkbox.setCOSJSTargetFunction(function(sender) {
                if (sender.state() == NSOffState) {
                    selectedItemsCount --;
                }
                if (sender.state() == NSOnState) {
                    selectedItemsCount ++;
                }
                if (selectedItemsCount == allMatchStyles.length) {
                    selectAllView.setState(NSOnState);
                } else if (selectedItemsCount == 0) {
                    selectAllView.setState(NSOffState);
                } else {
                    selectAllView.setState(NSMixedState);
                }
            });
            selectAllView.setCOSJSTargetFunction(function(sender) {
                if (sender.state() == NSOnState || sender.state() == NSMixedState) {
                    sender.setState(NSOnState);
                    selectedItemsCount = allMatchStyles.length;
                    scrollView.documentView().subviews().forEach(function(view) {
                        view.subviews().firstObject().setState(NSOnState);
                    });
                } else {
                    selectedItemsCount = 0;
                    scrollView.documentView().subviews().forEach(function(view) {
                        view.subviews().firstObject().setState(NSOffState);
                    });
                }
            });

            if (styleType == "text") {
                // Preview image
                var textStyleTempLayer = MSTextLayer.alloc().init();
                textStyleTempLayer.setStringValue(item.local.name());
                textStyleTempLayer.setStyle(item.local.style());
                var textLayerWidth = textStyleTempLayer.frame().width();
                var textLayerHeight = textStyleTempLayer.frame().height();
                var textStyleTempArtboard = MSArtboardGroup.alloc().init();
                textStyleTempArtboard.frame().setWidth(textLayerWidth);
                textStyleTempArtboard.frame().setHeight(textLayerHeight);
                textStyleTempLayer.moveToLayer_beforeLayer(textStyleTempArtboard, nil);
                var layerAncestry = textStyleTempArtboard.ancestry();
                var previewImage = MSSymbolPreviewGenerator.imageForSymbolAncestry_withSize_colorSpace_trimmed(
                    layerAncestry, CGSizeMake(textLayerWidth * 2, textLayerHeight * 2), NSColorSpace.sRGBColorSpace(), false
                );
                if (textLayerWidth <= 260 || textLayerHeight <= 40) {
                    var imageView = NSImageView.alloc().initWithFrame(NSMakeRect(35, 5, textLayerWidth, textLayerHeight));
                } else {
                    var imageView = NSImageView.alloc().initWithFrame(NSMakeRect(35, 5, 260, 40));
                }
                imageView.setImage(previewImage);
                imageView.setWantsLayer(true);
                // Add gray background color to white font
                var textColor = MSColor.alloc().initWithImmutableObject(textStyleTempLayer.textColor());
                if (textColor.fuzzyIsEqualExcludingAlpha(MSColor.whiteColor())) {
                    imageView.setBackgroundColor(NSColor.grayColor());
                }
                itemView.addSubview(imageView);

                var descText = item.local.style().textStyle().treeAsDictionary().NSFont.name + " â€” " +
                    item.local.style().textStyle().treeAsDictionary().NSFont.attributes.NSFontSizeAttribute + "px";
                var descView = UI.textLabel(descText, [35, 40, 260, 16]);
                descView.setWantsLayer(true);
                descView.setTextColor(NSColor.grayColor());
                itemView.addSubview(descView);

                var foreignStyleName = item.library.name();
                var nameView = UI.textLabel(foreignStyleName, [35, 56, 260, 16]);
                nameView.setWantsLayer(true);
                itemView.addSubview(nameView);
            }

            if (styleType == "layer") {
                // Preview image
                var layerStyleTempLayer = MSArtboardGroup.alloc().init();
                layerStyleTempLayer.frame().setWidth(40);
                layerStyleTempLayer.frame().setHeight(40);
                var rectangle = MSRectangleShape.alloc().init();
                rectangle.setRect(CGRectMake(8, 8, 24, 24));
                var previewLayer;
                if (MSApplicationMetadata.metadata().appVersion >= 52) {
                    previewLayer = rectangle;
                } else {
                    previewLayer = MSShapeGroup.shapeWithPath(rectangle);
                }
                previewLayer.setStyle(item.local.style());
                layerStyleTempLayer.addLayer(previewLayer);
                var imageView = NSImageView.alloc().initWithFrame(NSMakeRect(35, 0, 40, 40));
                var layerAncestry = layerStyleTempLayer.ancestry();
                var previewImage = MSSymbolPreviewGenerator.imageForSymbolAncestry_withSize_colorSpace_trimmed(
                    layerAncestry, CGSizeMake(80, 80), NSColorSpace.sRGBColorSpace(), false
                );
                imageView.setImage(previewImage);
                itemView.addSubview(imageView);

                var styleName = item.local.name();
                var styleNameParts = styleName.split(/\s*\/\s*/);
                var nameView1 = UI.textLabel(styleNameParts.slice(-1).join(""), [80, 5, 260, 16]);
                var nameView2 = UI.textLabel(styleNameParts.slice(0, -1).join("/"), [80, 20, 260, 16]);
                nameView2.setTextColor(NSColor.grayColor());
                itemView.addSubview(nameView1);
                itemView.addSubview(nameView2);
            }

            var divider = UI.divider([0, itemHeight - 1, 300, 1]);
            itemView.addSubview(divider);

            contentView.addSubview(itemView);
        });
        scrollView.setDocumentView(contentView);
    }

};

function getAllLayersWithSharedObjectIDs(document, ids) {
    var layers = NSMutableArray.alloc().init();
    var idArray = NSArray.arrayWithArray(ids);
    var loopPages = document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var predicateSupportType = NSPredicate.predicateWithFormat(
            "className IN %@",
            ["MSShapeGroup", "MSTextLayer", "MSLayerGroup", "MSBitmapLayer", "MSOvalShape", "MSRectangleShape", "MSShapePathLayer", "MSTriangleShape", "MSStarShape", "MSPolygonShape"]
        );
        var predicateSharedStyle;
        if (MSApplicationMetadata.metadata().appVersion >= 52) {
            predicateSharedStyle = NSPredicate.predicateWithFormat(
                "sharedStyleID IN %@",
                idArray
            );
        } else {
            predicateSharedStyle = NSPredicate.predicateWithFormat(
                "style.sharedObjectID IN %@",
                idArray
            );
        }
        var layersCanApplyStyleInPage = page.children().filteredArrayUsingPredicate(predicateSupportType);
        var layersWithSharedStyleInPage = layersCanApplyStyleInPage.filteredArrayUsingPredicate(predicateSharedStyle);
        layers.addObjectsFromArray(layersWithSharedStyleInPage);
    }
    return layers;
}

function foreignTextStyleInDocument_forSharedStyle_fromLibrary(documentData, sharedStyle, library) {
    for (var i = 0; i < documentData.foreignTextStyles().count(); i++) {
        var foreignTextStyle = documentData.foreignTextStyles().objectAtIndex(i);
        if (String(sharedStyle.objectID()) == String(foreignTextStyle.remoteShareID())) {
            return foreignTextStyle;
        }
    }
    var foreignTextStyle = MSForeignTextStyle.alloc().initWithOriginalObject_inLibrary(sharedStyle, library);
    documentData.addForeignTextStyle(foreignTextStyle);
    return foreignTextStyle;
}

function foreignLayerStyleInDocument_forSharedStyle_fromLibrary(documentData, sharedStyle, library) {
    for (var i = 0; i < documentData.foreignLayerStyles().count(); i++) {
        var foreignLayerStyle = documentData.foreignLayerStyles().objectAtIndex(i);
        if (String(sharedStyle.objectID()) == String(foreignLayerStyle.remoteShareID())) {
            return foreignLayerStyle;
        }
    }
    var foreignLayerStyle = MSForeignLayerStyle.alloc().initWithOriginalObject_inLibrary(sharedStyle, library);
    documentData.addForeignLayerStyle(foreignLayerStyle);
    return foreignLayerStyle;
}

function capitalize(str) {
    return str[0].toUpperCase() + str.slice(1);
}

function findSameStyle_fromLibrary_type(style, library, styleType) {
    var allLibraryStyles = stylesFromLibrary(library, styleType);
    var result = [];
    allLibraryStyles.forEach(libraryStyle => {
        if (style.value().propertiesAreEqual(libraryStyle.value())) {
            result.push(libraryStyle);
        }
    });
    return result.length > 0 ? result[0] : null;
}

function findStyleWithName_fromLibrary_type(name, library, styleType) {
    var allLibraryStyles = stylesFromLibrary(library, styleType);
    var predicate = NSPredicate.predicateWithFormat("name == %@", name);
    var result = allLibraryStyles.filteredArrayUsingPredicate(predicate);
    return result.firstObject();
}

function findStyleWithID_fromLibrary_type(id, library, styleType) {
    var allLibraryStyles = stylesFromLibrary(library, styleType);
    var predicate = NSPredicate.predicateWithFormat("objectID == %@", id);
    var result = allLibraryStyles.filteredArrayUsingPredicate(predicate);
    return result.firstObject();
}

function stylesFromLibrary(library, styleType) {
    var libraryDocumentData = library.document();
    var allLibraryTextStyles = libraryDocumentData.layerTextStyles().objects();
    var allLibraryLayerStyles = libraryDocumentData.layerStyles().objects();
    var allLibraryStyles;
    if (styleType == "text") {
        allLibraryStyles = allLibraryTextStyles;
    }
    if (styleType == "layer") {
        allLibraryStyles = allLibraryLayerStyles;
    }
    return allLibraryStyles;
}