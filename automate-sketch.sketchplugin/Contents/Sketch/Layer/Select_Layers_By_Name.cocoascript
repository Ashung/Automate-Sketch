var onRun = function(context) {

    var ga = require("../modules/Google_Analytics");
    ga(context, "Layer");

    // var sketch = require("sketch");

    var toast = require("sketch").UI.message;
    var document = require("sketch/dom").getSelectedDocument();
    var util = require("util");
    var Dialog = require("../modules/Dialog").dialog;
    var ui = require("../modules/Dialog").ui;
    var preferences = require("../modules/Preferences");

    var dialog = new Dialog(
        'Select Layers by Name',
        'Input string like "123" or Regular Expression like "\d+".'
    );

    var defaultUserInputString = preferences.get("selectLayersByName") || "";
    var userInputStringView = ui.textField(defaultUserInputString);
    dialog.addView(userInputStringView);

    var selectLayersByNameMatchCase = preferences.get("selectLayersByNameMatchCase") || false;
    var matchCaseView = ui.checkBox(selectLayersByNameMatchCase, "Match Case");
    dialog.addView(matchCaseView);

    var selectLayersByNameMatchAll = preferences.get("selectLayersByNameMatchAll") || false;
    var matchAllView = ui.checkBox(selectLayersByNameMatchAll, "Match Whole Word");
    dialog.addView(matchAllView);

    var selectLayersByNameRegExp = preferences.get("selectLayersByNameRegExp") || false;
    var regExpView = ui.checkBox(selectLayersByNameRegExp, "Use Regular Expression");
    dialog.addView(regExpView);

    var defaultSelectLayersFrom = preferences.get("selectLayersFrom") || 0;
    var selectLayersFromLabel = ui.textLabel("Select Layers From:");
    dialog.addView(selectLayersFromLabel);
    var layersFrom = [
        "Current Page",
        "Selection",
        "Children Layers in Selection"
    ];
    var layersFromView = ui.popupButton(layersFrom);
    layersFromView.selectItemAtIndex(defaultSelectLayersFrom);
    dialog.addView(layersFromView);

    var defaultSelectLayersType = preferences.get("selectLayersType") || 0;
    var layerTypeLabel = ui.textLabel("Layer type:");
    dialog.addView(layerTypeLabel);
    var layerTypes = [
        "All",
        "Artboard",
        "Symbol Master",
        "Symbol Instance",
        "Bitmap",
        "Text",
        "Shape",
        "Group",
        "Slice",
        "Hotspot"
    ];
    var layerTypeView = ui.popupButton(layerTypes);
    layerTypeView.selectItemAtIndex(defaultSelectLayersType);
    dialog.addView(layerTypeView);

    var runModal = dialog.run();
    if (runModal.responseCode == 1000) {

        // Save preferences
        preferences.set("selectLayersByName", userInputStringView.stringValue());
        preferences.set("selectLayersByNameMatchCase", Boolean(matchCaseView.state()));
        preferences.set("selectLayersByNameMatchAll", Boolean(matchAllView.state()));
        preferences.set("selectLayersByNameRegExp", Boolean(regExpView.state()));
        preferences.set("selectLayersFrom", layersFromView.indexOfSelectedItem());
        preferences.set("selectLayersType", layerTypeView.indexOfSelectedItem());

        // Filter layers
        var layers = NSMutableArray.alloc().init();
        if (layersFromView.indexOfSelectedItem() == 0) {
            layers.addObjectsFromArray(context.document.currentPage().children());
            layers.removeObject(context.document.currentPage());
        } else if (layersFromView.indexOfSelectedItem() == 1) {
            layers.addObjectsFromArray(context.selection);
        } else if (layersFromView.indexOfSelectedItem() == 2) {
            context.selection.forEach(function(item) {
                var _layer = item.children();
                _layer.removeObject(item);
                layers.addObjectsFromArray(_layer);
            });
        }

        var predicate;
        if (layerTypeView.indexOfSelectedItem() == 1) {
            predicate = NSPredicate.predicateWithFormat("className == %@", "MSArtboardGroup");
        } else if (layerTypeView.indexOfSelectedItem() == 2) {
            predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolMaster");
        } else if (layerTypeView.indexOfSelectedItem() == 3) {
            predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
        } else if (layerTypeView.indexOfSelectedItem() == 4) {
            predicate = NSPredicate.predicateWithFormat("className == %@", "MSBitmapLayer");
        } else if (layerTypeView.indexOfSelectedItem() == 5) {
            predicate = NSPredicate.predicateWithFormat("className == %@", "MSTextLayer");
        } else if (layerTypeView.indexOfSelectedItem() == 6) {
            predicate = NSPredicate.predicateWithFormat(
                "className IN %@",
                ["MSRectangleShape", "MSOvalShape", "MSShapePathLayer", "MSTriangleShape", "MSStarShape", "MSPolygonShape", "MSShapeGroup"]
            );
        } else if (layerTypeView.indexOfSelectedItem() == 7) {
            predicate = NSPredicate.predicateWithFormat("className == %@", "MSLayerGroup");
        } else if (layerTypeView.indexOfSelectedItem() == 8) {
            predicate = NSPredicate.predicateWithFormat("className == %@", "MSSliceLayer");
        } else if (layerTypeView.indexOfSelectedItem() == 9) {
            predicate = NSPredicate.predicateWithFormat("flow != null");
        }
        if (layerTypeView.indexOfSelectedItem() > 0) {
            layers = layers.filteredArrayUsingPredicate(predicate);
        }

        if (layers.count() == 0) {
            if (layerTypeView.indexOfSelectedItem() == 0) {
                toast("Not any layer.");
            } else {
                toast("Not any " + layerTypeView.titleOfSelectedItem() + " layer.");
            }
            return;
        }

        var rexExpFlag = Boolean(matchCaseView.state()) ? "g" : "gi";
        var regExpPrefix = Boolean(matchAllView.state()) ? "^" : "";
        var regExpSuffix = Boolean(matchAllView.state()) ? "$" : "";
        var regExpPattern = Boolean(regExpView.state())
            ? regExpPrefix + toRegExp(userInputStringView.stringValue()) + regExpSuffix
            : regExpPrefix + escapeRegExp(userInputStringView.stringValue()) + regExpSuffix;

        // log(layers)
        util.toArray(layers).forEach(function(layer) {
            var regExp = new RegExp(regExpPattern, rexExpFlag);
            console.log(layer.name(), regExp.test(layer.name()));
        });

        // TODO: Select layers
        // context.selection.forEach(layer => {
        //     var regExp = new RegExp("^\\w+$", "gi");
        //     console.log(layer.name(), regExp.toString(), regExp.test(layer.name()))
        // })
    }

};

function toRegExp(string) {
    return String(string).replace(/\\/g,"\\");
}

function escapeRegExp(string) {
    return String(string).replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function selectLayerByNameWithSelection(context, page, selection, userInputString, regexp, filterType) {

    var doc = context.document;
    var totalCount = 0;

    // Fix Sketch 45
    var page = doc.currentPage();
    if (page.deselectAllLayers) {
        page.deselectAllLayers();
    } else {
        page.changeSelectionBySelectingLayers(nil);
    }

    if (selection.count() == 0) {
        selectLayerByName(page, userInputString, regexp, filterType, function(count){
            totalCount = count;
        });
    } else {
        var loopSelection = selection.objectEnumerator();
        var layer;
        while (layer = loopSelection.nextObject()) {
            selectLayerByName(layer, userInputString, regexp, filterType, function(count) {
                totalCount += count;
            });
        }
    }

    if (totalCount == 0) {
        doc.showMessage("No layer found.");
    } else if (totalCount == 1) {
        doc.showMessage("Select 1 layer.");
    } else {
        doc.showMessage("Select " + totalCount + " layers.");
    }
}

function selectLayerByName(parent, name, regexp, filterType, callback) {

    var count = 0;
    var loop = parent.children().objectEnumerator();
    var child;
    while (child = loop.nextObject()) {

        var nameMatch = false,
            typeMatch = false;

        if (regexp) {
            if (RegExp(name).test(child.name())) {
                nameMatch = true;
            }
        } else {
            if (child.name().isEqualToString(name)) {
                nameMatch = true;
            }
        }

        if (nameMatch) {
            if (
                (filterType == 0) ||
                (filterType == 1 && child.class() == "MSArtboardGroup") ||
                (filterType == 1 && child.class() == "MSSymbolMaster") ||
                (filterType == 2 && child.class() == "MSSymbolInstance") ||
                (filterType == 3 && child.class() == "MSBitmapLayer") ||
                (filterType == 4 && child.class() == "MSTextLayer") ||
                (filterType == 5 && Sketch.isShapeLayer(child)) ||
                (filterType == 6 && child.class() == "MSSliceLayer") ||
                (filterType == 7 && child.class() == "MSLayerGroup")
            ) {
                typeMatch = true;
            }

            if (typeMatch) {
                // Fix Sketch 45
                if (MSApplicationMetadata.metadata().appVersion < 45) {
                    child.select_byExpandingSelection(true, true);
                } else {
                    child.select_byExtendingSelection(true, true);
                }
                count ++;
            }
        }
    }

    if (callback && typeof(callback) == "function") {
        callback(count);
    }
}
